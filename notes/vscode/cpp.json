{
/*
	// Place your snippets for C++ here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/



	"import": {
		"prefix": "import",
		"body": [
"#include <iostream>",
"#include <fstream>",
"#include <vector>",
"#include <cmath>",
"#include <stack>",
"#include <sstream>",
"#include <climits>",
"#include <deque>",
"#include <set>",
"#include <utility>", 
"#include <queue>",
"#include <map>",
"#include <cstring>",
"#include <algorithm>",
"#include <iterator>",
"#include <string>",
"#include <cassert>",
"",
"using namespace std;",
"#define REOPEN_READ freopen(\"/home/martin/X-Brain/Notes/Clang/OnlineJudge/input.txt\", \"r\", stdin);",
"#define REOPEN_WRITE freopen(\"/home/martin/X-Brain/Notes/Clang/OnlineJudge/output.txt\", \"w\", stdout);",
"$1",
"int main(){",
"    REOPEN_READ",
"    //REOPEN_WRITE",
"",
"    return 0;",
"}"
		],
		"description": "import necessary files for online judeg"
	},
	"init class": {
		"prefix": "class",
		"body": [
			"class $1{",
			"public:",
				"};"
		],
		"description": "main with return"
	},

	"make easy graph": {
		"prefix": "makeEasyGraph",
		"body": [
"#define VERTEX_NUM (10000 + 10)",
"class Edge{",
"   public:",
"       int x;",
"       int y;",
"       int weight;",
"       Edge(){};",
"       Edge(int x, int y):x(x), y(y){}",
"       Edge(int x, int y, int weight):x(x), y(y), weight(weight){}",
"};",
"",
"vector<Edge> graph[VERTEX_NUM];",
"",
"void add_w_edge(int x, int y, int weight){",
"    graph[x].push_back(Edge(x, y, weight));",
"}",
"",
"void add_edge(int x, int y){",
"    graph[x].push_back(Edge(x, y));",
"}",
"",
"void initGraph() {",
"    for(int i = 0; i < VERTEX_NUM; i++) graph[i].clear();",
"}",


		],
		"description": "main with return"
	},

	"read next char": {
		"prefix": "readChar",
		"body": [
"char readChar(){",
"    char c = '\\0';",
"    while(c == '\\0' || c == ' ' || c == '\\t' || c == '\\n') c = getchar();",
"    return c;",
"}"
		],
		"description": "main with return"
	},
	"define inf": {
		"prefix": "definf",
		"body": [
			"#define INF 0x3f3f3f3f"
		],
		"description": "main with return"
	},
	"flow edeg": {
		"prefix": "flowEdge",
		"body": [
"class Edge{",
"public:",
"    int x;",
"    int y;",
"    int cap;",
"    int flow;",
"    Edge(int x, int y, int cap, int flow): x(x), y(y), cap(cap), flow(flow){};",
"};",
		],
		"description": "main with return"
	},


	"main": {
		"prefix": "main",
		"body": [
			"int main(){",
				"\t$1",
				"\treturn 0;",
				"}"
		],
		"description": "main with return"
	}
	,

	"Node class": {
		"prefix": "makeNode",
		"body": [
"class Node{",
"public:",
"    Node * l = nullptr;",
"    Node * r = nullptr;",
"    int num;",
"};",
		],
		"description": "main with return"
	}
	,
	"make a for loop": {
		"prefix": "fori",
		"body": [
			"for(int $1i = 0; $1i < ; $1i++){",
				"}"
		],
		"description": "for loop"
	}
	,


	"geeks": {
		"prefix": "geek",
		"body": [
"#define getmid(l,r) ((l) + ((r) - (l)) / 2)",
"#define MP(a,b) make_pair(a,b)",
"#define PB(a) push_back(a)",
"",
"typedef long long ll;",
"typedef pair<int,int> pii;",
"const double eps = 1e-8;",
"const int INF = 0x3f3f3f3f;",
"const int MAXN = 100010;",
		],
		"description": "make a comment"
	},
	"define long long int": {
		"prefix": "deflld",
		"body": [
"#define lld long long int"
		],
		"description": "define lld"
	},
	"comment": {
		"prefix": "comment",
		"body": [
			"/**",
			" *$1",
			" */"
		],
		"description": "make a comment"
	},
	"printf": {
		"prefix": "print",
		"body": [
			"printf(\"%$1d\\n\", );"
		],
		"description": "make a comment"
	},
	"make the graph": {
		"prefix": "makeGraph",
		"body": [

"# define VERTEX_NUM (100 * 100)",
"# define EDGE_NUM (100 * 100 * 8)",
"",
"class Edge{",
"   public:",
"       int x;",
"       int y;",
"       int head;",
"       int weight;",
"       Edge(){};",
"       Edge(int x, int y, int head):x(x), y(y), head(head){}",
"       Edge(int x, int y, int head, int weight):x(x), y(y), head(head), weight(weight){}",
"",
"   };",
"int nodeHead[VERTEX_NUM];",
"int nodePointer;",
"Edge graph[EDGE_NUM];",
"",
"void addWeightedEdge(int x, int y, int weight){",
"       graph[nodePointer] = Edge(x, y, nodeHead[x], weight);",
"       nodeHead[x] = nodePointer;",
"       nodePointer ++;",
"   }",
"",
"void addEdge(int x, int y){",
"       graph[nodePointer] = Edge(x, y, nodeHead[x]);",
"       nodeHead[x] = nodePointer;",
"       nodePointer ++;",
"   }",
"",
"void initGraph() {",
"    memset(nodeHead, -1, sizeof(nodeHead));",
"    nodePointer = 0;",
"}",

		],
		"description": "使用前向星结构存储的图形"
	}
}
